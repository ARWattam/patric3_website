Ext.define("Ext.ux.tree.tristate.Model",{extend:"Ext.data.Model",idProperty:"id",fields:[{name:"id",type:"int"},{name:"name",type:"string"},{name:"checked",type:"boolean",defaultValue:false},{name:"partial",type:"boolean",defaultValue:false},{name:"iconCls",type:"string",defaultValue:"x-tree-noicon"},{name:"leaf",type:"boolean"}]});Ext.define("Ext.ux.tree.tristate.Plugin",{extend:"Ext.AbstractPlugin",alias:"plugin.tristatetreeplugin",init:function(a){a.on("checkchange",this.updateRecord,this)},updateRecord:function(a,c){var b=this;a.cascadeBy(function(d){d.set("checked",c);d.set("partial",false)});if(a.parentNode!=undefined){b.updateAncestor(a.parentNode)}},updateAncestor:function(a){var c,b;a.bubble(function(d){c=0,b=false;d.eachChild(function(e){if(e.get("partial")){b=true}if(e.get("checked")){c++}});if(b){d.set("partial",true)}else{if(c==d.childNodes.length){d.set("checked",true);d.set("partial",false)}else{if(c==0){d.set("checked",false);d.set("partial",false)}else{d.set("partial",true)}}}})}});Ext.define("Ext.ux.tree.tristate.Column",{extend:"Ext.grid.column.Column",alias:"widget.tristatetreecolumn",tdCls:Ext.baseCSSPrefix+"grid-cell-treecolumn",autoLock:true,lockable:false,draggable:false,hideable:false,iconCls:Ext.baseCSSPrefix+"tree-icon",checkboxCls:Ext.baseCSSPrefix+"tree-checkbox",elbowCls:Ext.baseCSSPrefix+"tree-elbow",expanderCls:Ext.baseCSSPrefix+"tree-expander",textCls:Ext.baseCSSPrefix+"tree-node-text",innerCls:Ext.baseCSSPrefix+"grid-cell-inner-treecolumn",isTreeColumn:true,cellTpl:['<tpl for="lines">','<img src="{parent.blankUrl}" class="{parent.childCls} {parent.elbowCls}-img ','{parent.elbowCls}-<tpl if=".">line<tpl else>empty</tpl>"/>',"</tpl>",'<img src="{blankUrl}" class="{childCls} {elbowCls}-img {elbowCls}','<tpl if="isLast">-end</tpl><tpl if="expandable">-plus {expanderCls}</tpl>"/>','<tpl if="checked !== null">','<input type="button" role="checkbox" <tpl if="checked">aria-checked="true" </tpl>','class="{childCls} {checkboxCls}<tpl if="partial"> {checkboxCls}-partial<tpl elseif="checked"> {checkboxCls}-checked</tpl>"/>',"</tpl>",'<img src="{blankUrl}" class="{childCls} {baseIconCls} ','{baseIconCls}-<tpl if="leaf">leaf<tpl else>parent</tpl> {iconCls}"','<tpl if="icon">style="background-image:url({icon})"</tpl>/>','<tpl if="href">','<a href="{href}" target="{hrefTarget}" class="{textCls} {childCls}">{value}</a>',"<tpl else>",'<span class="{textCls} {childCls}">{value}</span>',"</tpl>"],initComponent:function(){var a=this;a.origRenderer=a.renderer;a.origScope=a.scope||window;a.renderer=a.treeRenderer;a.scope=a;a.callParent()},treeRenderer:function(k,a,e,b,d,l,i){var h=this,n=e.get("cls"),g=h.origRenderer,c=e.data,j=e.parentNode,m=i.rootVisible,o=[],f;if(n){a.tdCls+=" "+n}while(j&&(m||j.data.depth>0)){f=j.data;o[m?f.depth:f.depth-1]=f.isLast?0:1;j=j.parentNode}return h.getTpl("cellTpl").apply({record:e,baseIconCls:h.iconCls,iconCls:c.iconCls,icon:c.icon,checkboxCls:h.checkboxCls,partial:c.partial,checked:c.checked,elbowCls:h.elbowCls,expanderCls:h.expanderCls,textCls:h.textCls,leaf:c.leaf,expandable:e.isExpandable(),isLast:c.isLast,blankUrl:Ext.BLANK_IMAGE_URL,href:c.href,hrefTarget:c.hrefTarget,lines:o,metaData:a,childCls:h.getChildCls?h.getChildCls()+" ":"",value:g?g.apply(h.origScope,arguments):k})}});